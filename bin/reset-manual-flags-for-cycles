#!/usr/bin/env node

var _ = require('lodash');
var path = require('path');
var Q = require('q');

var cli = require('../CARLI/CommandLine');
var cycleRepository = require('../CARLI/Entity/CycleRepository');
var offeringRepository = require('../CARLI/Entity/OfferingRepository');

cli.withSingleArgument('cycle-id', resetPricingToLastYearsPrice);

function resetPricingToLastYearsPrice(cycleId) {
    return cli.asCouchAdmin(setThisYearsPriceBackToLastYears);

    function setThisYearsPriceBackToLastYears() {
        var currentCycle = null;
        var updatedCount = 0;
        var errorCount = 0;

        return loadCurrentCycle()
            .then(loadOfferingsFromCurrentCycle)
            .then(updateCurrentOfferings)
            .then(function() {
                Logger.log('Updated offerings: ' + updatedCount);
                Logger.log('Errors: ' + errorCount);
            });

        function loadCurrentCycle() {
            return cycleRepository.load(cycleId).then(setCurrentCycle);

            function setCurrentCycle(cycle) {
                currentCycle = cycle;
                return currentCycle;
            }
        }
        function loadOfferingsFromCurrentCycle(previousCycle) {
            Logger.debug('Loading offerings for cycle');
            return offeringRepository.listOfferingsUnexpanded(previousCycle);
        }
        function updateCurrentOfferings(offerings) {
            Logger.log('Loaded ' + offerings.length + ' offerings');
            return transformOfferingsOneAtATime();

            function transformOfferingsOneAtATime() {
                if (offerings.length > 0) {
                    return tryUpdateNextOffering().then(transformOfferingsOneAtATime);
                }
                function tryUpdateNextOffering() {
                    var nextOffering = offerings.pop();
                    return tryUpdateCurrentOffering(nextOffering);
                }
            }

            function tryUpdateCurrentOffering(offering) {
                updateCurrentOffering();
                return saveCurrentOffering(offering)
                    .catch(logAndCountError);

                function updateCurrentOffering() {
                    clearFlag();
                    updatedCount++;

                    return offering;

                    function clearFlag() {
                        delete offering.flagged;
                        delete offering.flaggedReason;
                    }
                }
                function saveCurrentOffering(currentOffering) {
                    return offeringRepository.update(currentOffering, currentCycle);
                }
                function logAndCountError(e) {
                    Logger.log(e.stack);
                    console.log(offering);
                    errorCount++;
                }
            }
        }
    }
}
