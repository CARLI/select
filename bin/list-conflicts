#!/usr/bin/env node

const cli = require('../CARLI/CommandLine');
const couchUtils = require('../CARLI/Store/CouchDb/Utils')();

var numSkips = 0;
var numOk = 0;
var numConflicts = 0;
var numTotal = 0;

cli.asCouchAdmin(() => {
    return cli.withOptionalSingleArgument(listConflicts)
        .then(() => {
            console.log(`Processed ${numTotal} databases`);
            console.log(`${numOk} were ok, ${numSkips} were skipped, and ${numConflicts} had conflicts`);
            process.exit();
        });
});

async function listConflicts(databaseName) {
    if (!databaseName) {
        console.log("To see a list of conflicts in a given database:");
        console.log(`\t${cli.getProgramName()} <database name>\n`);

        console.log("Generating summary of databases with conflicts...");

        return listAllConflicts();
    }

    return listConflictsForDatabase(databaseName);
}

async function listAllConflicts() {
    const databases = await couchUtils.listDatabases();
    // const summaryPromises = databases.map(summarizeConflictsForDatabase);
    // return Promise.all(summaryPromises);
    return forEachSyncronizingAsyncronousCallback(databases, summarizeConflictsForDatabase);
}

function summarizeConflictsForDatabase(databaseName) {
    return couchUtils.getCouchViewResultValuesWithNamedDesignDoc(databaseName, 'ListConflicts', 'listConflicts')
        .then((results) => {
            if (results.length !== 0)
                console.log(`${databaseName} has ${results.length} conflicting documents`);
            numTotal++;
            if (results.length !== 0)
                numConflicts++;
            else
                numOk++;
        }).catch(e => {
            numTotal++;
            numSkips++;
            console.log("Encountered an error");
            console.log(e);
            process.exit();
        });
}

function forEachSyncronizingAsyncronousCallback(inputList, fn, i = 0, accumulatedOutput = []) {
    return fn(inputList[i])
        .then(result => {
            accumulatedOutput.push(result);
            return forEachSyncronizingAsyncronousCallback(inputList, fn, i + 1, accumulatedOutput);
        })
        .catch(e => {
            console.log("Encountered an error during recursion");
            console.log(e);
            process.exit();
        });
}

function listConflictsForDatabase(databaseName) {
}

